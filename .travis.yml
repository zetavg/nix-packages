language: nix

sudo: false

# env:
#   global:
#     - CACHIX_CACHE=
#     - NUR_REPO=

matrix:
  fast_finish: true
  allow_failures:
    - env: NIX_CHANNEL=https://nixos.org/channels/nixpkgs-unstable
      os: osx
      sudo: true
    - env: NIX_CHANNEL=https://nixos.org/channels/nixos-unstable
  # Test against different versions of nixpkgs.
  # The version names used here came from the name of branches
  # in https://github.com/NixOS/nixpkgs-channels.
  include:
    # unstable
    - env: NIX_CHANNEL=https://nixos.org/channels/nixpkgs-unstable
      os: osx
      sudo: true
    - env: NIX_CHANNEL=https://nixos.org/channels/nixos-unstable
    # 19.03
    - env: NIX_CHANNEL=https://nixos.org/channels/nixpkgs-19.03-darwin
      os: osx
      sudo: true
    - env: NIX_CHANNEL=https://nixos.org/channels/nixos-19.03
    # 18.09
    - env: NIX_CHANNEL=https://nixos.org/channels/nixos-18.09
    # Nixpkgs version < 19.03 dosen't support "appendOverlays", so
    # "manuallyAppendOverlaysToPkgs" is used to import the whole package.
    # They're actually different, so here we test to USE_AS_OVERLAY as normal.
    - env:
      - NIX_CHANNEL=https://nixos.org/channels/nixos-18.09
      - USE_AS_OVERLAY=true

install:
  - if [ -n "${CACHIX_CACHE}" -a "Darwin" = "$(uname)" ]; then
      echo "trusted-users = root $USER" | sudo tee -a /etc/nix/nix.conf;
      sudo pkill nix-daemon;
      sudo nix-daemon & :;
    fi
  - if [ -n "${CACHIX_CACHE}" ]; then travis_retry nix-channel --update; fi
  - if [ -n "${CACHIX_CACHE}" ]; then nix-env -iA cachix -f https://cachix.org/api/v1/install; fi
  - if [ -n "${CACHIX_CACHE}" ]; then cachix use "${CACHIX_CACHE}"; fi
  - mkdir -p ~/.nixpkgs &&
    echo "{ allowBroken = true; allowUnfree = true; allowUnsupportedSystem = true; }" > ~/.nixpkgs/config.nix
  - nix-channel --add "${NIX_CHANNEL}" nixpkgs
  - travis_retry nix-channel --update
  - nix --version
  - nix-instantiate --eval -E 'with import <nixpkgs> {}; lib.version or lib.nixpkgsVersion'

script:
  - nix-build ci.nix -A buildOutputs
  # - nix eval -f default.nix 'lib'
  # - nix eval -f default.nix 'modules'
  # - nix eval -f default.nix 'overlays'

after_success:
  - if [ -n "${CACHIX_CACHE}" ]; then nix-build ci.nix -A cacheOutputs | cachix push "${CACHIX_CACHE}"; fi
  - if [ -n "${NUR_REPO}" -a "false" = "${TRAVIS_PULL_REQUEST}" -a "master" = "${TRAVIS_BRANCH}" ]; then
      curl -XPOST "https://nur-update.herokuapp.com/update?repo=${NUR_REPO}";
    fi
